lint:
  extends: .node-image
  stage: test
  needs: ["build"]
  cache:
    - key: "${CI_PIPELINE_ID}-build-frontend"
      paths:
        - .npm/
        - .nuxt/
        - node_modules/
      policy: pull
    - key: "${CI_PIPELINE_ID}-report"
      paths:
        - report/
      policy: push
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run lint:ci

.lint-junit-report:
  extends: .node-image
  stage: test
  needs: ["build"]
  cache:
    - key: "${CI_PIPELINE_ID}-build-frontend"
      paths:
        - .npm/
        - .nuxt/
        - node_modules/
      policy: pull
  before_script:
    - npm ci --cache .npm --prefer-offline
    - mkdir report
  artifacts:
    when: always
    reports:
      junit:
        - report/lint-junit.xml
    paths:
      - report/
    expire_in: 3 week

lint-js-report:
  extends: .lint-junit-report
  script:
    - npm run lint:js-ci-junit

lint-style-report:
  extends: .lint-junit-report
  script:
    - npm run lint:style-ci-junit

test:
  extends: .node-image
  stage: test
  needs: ["build"]
  cache:
    - key: "${CI_PIPELINE_ID}-build-frontend"
      paths:
        - .npm/
        - .nuxt/
        - node_modules/
      policy: pull
    - key: "${CI_PIPELINE_ID}-coverage"
      paths:
        - coverage/
      policy: push
  script:
    - npm ci --cache .npm --prefer-offline
    - NODE_ENV=test
    - npm run test:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit:
        - report/junit.xml
    paths:
      - coverage/
    expire_in: 3 week
