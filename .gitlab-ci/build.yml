.node-image:
  image: node:14-alpine
  tags:
    - docker_runner

build:
  extends: .node-image
  stage: build
  cache:
    - key: "${CI_PIPELINE_ID}-build-frontend"
      paths:
        - .npm/
        - .nuxt/
        - node_modules/
      policy: push
    - key: "${CI_PIPELINE_ID}-build-lsg"
      paths:
        - lsg-public/
      policy: push
  script:
    - npm cache verify
    - npm i
    - npx jest --clearCache
    - BABEL_ENV=test
    - npm run test
    # - npm run build
    # - npm run lsg:build
  artifacts:
    when: on_failure
    paths:
      - .npm/_logs
    expire_in: 3 week
lint:
  extends: .node-image
  stage: test
  needs: ["build"]
  cache:
    - key: "${CI_PIPELINE_ID}-build-frontend"
      paths:
        - .npm/
        - .nuxt/
        - node_modules/
      policy: pull
    - key: "${CI_PIPELINE_ID}-report"
      paths:
        - report/
      policy: push
  script:
    - npm run lint:ci
  artifacts:
    when: always
    paths:
      - report/
    expire_in: 3 week
test:
  extends: .node-image
  stage: test
  needs: ["build"]
  cache:
    - key: "${CI_PIPELINE_ID}-build-frontend"
      paths:
        - .npm/
        - .nuxt/
        - node_modules/
      policy: pull
    - key: "${CI_PIPELINE_ID}-coverage"
      paths:
        - coverage/
      policy: push
  script:
    - NODE_ENV=test
    - npm test
  artifacts:
    when: always
    reports:
      junit: coverage/clover.xml
    paths:
      - coverage/
    expire_in: 3 week

sonar-qube:
  image: sonarsource/sonar-scanner-cli
  stage: analysis
  needs: ["test", "lint"]
  cache:
    - key: "${CI_PIPELINE_ID}-build-frontend"
      paths:
        - .npm/
        - .nuxt/
        - node_modules/
      policy: pull
    - key: "${CI_PIPELINE_ID}-report"
      paths:
        - report/
      policy: pull
    - key: "${CI_PIPELINE_ID}-coverage"
      paths:
        - coverage/
      policy: pull
  script:
    - sonar-scanner -Dsonar.login=${SONARQUBE_ACCESS_TOKEN}
  tags:
    - docker_runner
  only:
    - develop

.build-docker-image:
  image: docker:git
  stage: build-docker-image
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
  services:
    - docker:dind
  cache: []
  before_script:
    - # disable gitlab warning for docker login
      echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin ${CI_REGISTRY}
  script:
    - docker build
      -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
      --build-arg NODE_ENV=${NODE_ENV}
      --build-arg BASE_URL="${CI_ENVIRONMENT_URL}"
      --build-arg DOMAIN="${CI_ENVIRONMENT_URL}"
      --build-arg DEFAULT_LANGUAGE_CODE="${DEFAULT_LANGUAGE_CODE}"
      --build-arg STORYBLOK_OAUTH_TOKEN="${STORYBLOK_OAUTH_TOKEN}"
      --build-arg STORYBLOK_ACCESS_TOKEN="${STORYBLOK_ACCESS_TOKEN}"
      --build-arg STORYBLOK_SPACE_ID=${STORYBLOK_SPACE_ID}
      --build-arg STORYBLOK_VERSION="${STORYBLOK_VERSION}"
      --build-arg STORYBLOK_RESOLVE_RELATIONS="${STORYBLOK_RESOLVE_RELATIONS}"
      --build-arg STORYBLOK_RESOLVE_LINKS="${STORYBLOK_RESOLVE_LINKS}"
      --build-arg STORYBLOK_RESOLVE_ASSETS="${STORYBLOK_RESOLVE_ASSETS}"
      --build-arg STORYBLOK_CONTENT_TYPES="${STORYBLOK_CONTENT_TYPES}"
      --build-arg STORYBLOK_EXCLUDE_ROUTES="${STORYBLOK_EXCLUDE_ROUTES}"
      --build-arg CI_COMMIT_SHORT_SHA="${CI_COMMIT_SHORT_SHA}"
      --build-arg CI_COMMIT_REF_NAME="${CI_COMMIT_REF_NAME}"
      --build-arg CI_PROJECT_URL="${CI_PROJECT_URL}"
      -f docker/Dockerfile .
  after_script:
    - # here we will push ALL created tags of an image
      docker push --all-tags ${DOCKER_IMAGE_NAME}
  tags:
    - dind_runner

build-docker-image-frontend:
  extends: .build-docker-image
  needs: ["test", "lint"]
  environment:
    name: dev2
  except:
    - develop

build-docker-image-lsg:
  extends: .build-docker-image
  needs: ["test", "lint"]
  cache:
    - key: "${CI_PIPELINE_ID}-build-lsg"
      paths:
        - lsg-public/
      policy: pull
  script:
    - docker build -t ${DOCKER_IMAGE_NAME}:lsg-${CI_COMMIT_REF_SLUG} -f docker/DockerfileLSG .
  except:
    - develop

build-docker-image-frontend-develop:
  extends: .build-docker-image
  needs: ["sonar-qube"]
  environment:
    name: dev2
  only:
    - develop

build-docker-image-lsg-develop:
  extends: .build-docker-image
  needs: ["sonar-qube"]
  cache:
    - key: "${CI_PIPELINE_ID}-build-lsg"
      paths:
        - lsg-public/
      policy: pull
  script:
    - docker build -t ${DOCKER_IMAGE_NAME}:lsg-${CI_COMMIT_REF_SLUG} -f docker/DockerfileLSG .
  only:
    - develop

tag-docker-image-latest-main:
  extends: .build-docker-image
  needs: ["build-docker-image-frontend"]
  script:
    - docker pull ${DOCKER_IMAGE_NAME}:main
    - docker tag ${DOCKER_IMAGE_NAME}:main ${DOCKER_IMAGE_NAME}:latest
  only:
    - main

build-docker-image-frontend-uat-tags:
  extends: .build-docker-image
  needs: ["test", "lint"]
  variables:
    DOCKER_IMAGE_TAG: uat-${CI_COMMIT_REF_SLUG}
  environment:
    name: uat
  only:
    - tags

build-docker-image-frontend-prd-tags:
  extends: .build-docker-imag
  needs: ["test", "lint"]
  variables:
    DOCKER_IMAGE_TAG: prd-${CI_COMMIT_REF_SLUG}
  environment:
    name: prd
  only:
    - tags

tag-gitlab-nightly:
  needs: ["build-docker-image-frontend-develop"]
  image: docker:git
  stage: build-docker-image
  before_script:
    - git remote remove origin
    - git remote add origin https://"${CI_GITLAB_TAG_WRITE_TOKEN_USERNAME}:${CI_GITLAB_TAG_WRITE_TOKEN_PASSWORD}"@gitlab.diva-e.com/pvac/pvweb.git
  script:
    - git tag  "$(date +'%Y%m%d.%H%M')"
    - git push origin "$(date +'%Y%m%d.%H%M')"
  only:
    - schedules
  tags:
    - docker_runner
